~openapi: 3.1.0
info:
  title: Whiteboard Signage API
  version: 0.1.0
  description: |
    REST interface for Whiteboard Signage System (Nuxt + ConoHa VPS).
    * Auth via Google OAuth2 or MagicLink.
    * All responses JSON unless noted.
servers:
  - url: https://api.example.com
    description: Production
  - url: http://localhost:3010
    description: Local dev
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
      required: [message]
    Schedule:
      type: object
      properties:
        id: { type: string, format: uuid }
        organizationId: { type: string }
        authorId: { type: string }
        title: { type: string }
        description: { type: string, nullable: true }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        color: { type: string, nullable: true }
        source: { type: string, enum: [INTERNAL, GOOGLE, CSV] }
        updatedAt: { type: string, format: date-time }
      required: [id, title, start, end]
    ScheduleCreate:
      allOf:
        - $ref: '#/components/schemas/Schedule'
        - required: [title, start, end]
    ScheduleUpdate:
      type: object
      description: Partial update; at least one field required.
      properties:
        title: { type: string }
        description: { type: string }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        color: { type: string }
    DeviceHeartbeat:
      type: object
      properties:
        deviceId: { type: string }
        kioskSecret: { type: string }
        timestamp: { type: string, format: date-time }
      required: [deviceId, kioskSecret]
paths:
  /auth/google:
    get:
      summary: Google OAuth2 redirect
      operationId: authGoogle
      responses:
        '302':
          description: Redirect to Google consent screen.
  /auth/google/callback:
    get:
      summary: OAuth2 callback
      operationId: authGoogleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema: { type: string }
      responses:
        '302':
          description: Redirect with session cookie set.
  /auth/magic-link:
    post:
      summary: Send magiclink login email
      operationId: authMagicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
              required: [email]
      responses:
        '204': { description: Email sent }
  /schedules:
    get:
      summary: List schedules in range
      operationId: listSchedules
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: orgId
          in: query
          required: true
          schema: { type: string }
        - name: from
          in: query
          schema: { type: string, format: date-time }
        - name: to
          in: query
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Array of Schedule
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Schedule' }
    post:
      summary: Create schedule
      operationId: createSchedule
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ScheduleCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Schedule' }
  /schedules/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      summary: Get schedule by id
      operationId: getSchedule
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Schedule
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Schedule' }
    patch:
      summary: Update schedule
      operationId: updateSchedule
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ScheduleUpdate' }
      responses:
        '200':
          description: Updated schedule
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Schedule' }
    delete:
      summary: Delete schedule
      operationId: deleteSchedule
      security: [ { bearerAuth: [] } ]
      responses:
        '204': { description: Deleted }
  /devices/heartbeat:
    post:
      summary: Device heartbeat ping
      operationId: deviceHeartbeat
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DeviceHeartbeat' }
      responses:
        '204': { description: Accepted }
  /devices:
    get:
      summary: List devices in org
      operationId: listDevices
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: orgId
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Array of devices
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    name: { type: string }
                    language: { type: string }
                    lastHeartbeat: { type: string, format: date-time, nullable: true }
~
